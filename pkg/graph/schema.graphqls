type Check {
  id: ID!
  name: String!
  weight: Int!
  credentials: [Credential!]!
  statuses: [Status!]!
}

type Credential {
  id: ID!
  password: String!
  user: User!
}

type Round {
  id: ID!
  number: Int!
  completed: Boolean!
  statuses: [Status!]!
  scores: [Score!]!
}

type Score {
  id: ID!
  score: Int!
  round: Round!
  user: User!
}

enum StatusEnum {
  success
  failure
  unknown
}

type Status {
  id: ID!
  status: StatusEnum!
  message: String!
  timestamp: String!
  points: Int!
  round: Round!
  check: Check!
  user: User!
}

enum RoleEnum {
  admin
  competitor
}

type User {
  id: ID!
  name: String!
  team_number: Int!
  role: RoleEnum!
  credentials: [Credential!]!
  statuses: [Status!]!
  scores: [Score!]!
}

type Query {
  checks: [Check!]!
  check(id: ID!): Check!

  credentials: [Credential!]!
  credential(id: ID!): Credential!

  rounds: [Round!]!
  round(id: ID!): Round!

  scores: [Score!]!
  score(id: ID!): Score!

  statuses: [Status!]!
  status(id: ID!): Status!

  users: [User!]!
  user(id: ID!): User!
}
type Mutation {
  createCheck(name: String!, weight: Int!): Check!
  updateCheck(id: ID!, name: String!, weight: Int!): Check!
  deleteCheck(id: ID!): String!

  updateCredential(id: ID!, password: String!): Credential!

  updateRound(id: ID!, number: Int!, completed: Boolean!): Round!
  deleteRound(id: ID!): String!

  updateScore(id: ID!): Score!
  deleteScore(id: ID!): String!

  updateStatus(
    id: ID!
    status: StatusEnum!
    message: String!
    timestamp: String!
    points: Int!
  ): Status!

  createUser(name: String!, team_number: Int!, role: RoleEnum!): User!
  updateUser(id: ID!, name: String!, team_number: Int!, role: RoleEnum!): User!
  deleteUser(id: ID!): String!

  login(name: String!, password: String!): String!
}
