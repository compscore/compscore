// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CheckStatus struct {
	Name   string       `json:"name"`
	Status StatusStatus `json:"status"`
}

type Scoreboard struct {
	Round  int            `json:"round"`
	Scores []int          `json:"scores"`
	Checks []*CheckStatus `json:"checks"`
}

type StatusStatus string

const (
	StatusStatusSuccess StatusStatus = "success"
	StatusStatusFailure StatusStatus = "failure"
	StatusStatusUnknown StatusStatus = "unknown"
)

var AllStatusStatus = []StatusStatus{
	StatusStatusSuccess,
	StatusStatusFailure,
	StatusStatusUnknown,
}

func (e StatusStatus) IsValid() bool {
	switch e {
	case StatusStatusSuccess, StatusStatusFailure, StatusStatusUnknown:
		return true
	}
	return false
}

func (e StatusStatus) String() string {
	return string(e)
}

func (e *StatusStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusStatus", str)
	}
	return nil
}

func (e StatusStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin      UserRole = "admin"
	UserRoleCompetitor UserRole = "competitor"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleCompetitor,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleCompetitor:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
