enum UserRole {
  admin
  competitor
}

type User {
  id: Int!
  name: String!
  teamNumber: Int!
  role: UserRole!
  credentials: [Credential!]!
  statuses: [Status!]!
}

type Credential {
  id: Int!
  password: String!
  check: Check!
  user: User!
}

type Check {
  id: Int!
  name: String!
  weight: Int!
  credentials: [Credential!]!
  statuses: [Status!]!
}

enum StatusStatus {
  success
  failure
  unknown
}

type Status {
  id: Int!
  status: StatusStatus!
  message: String!
  timestamp: String!
  points: Int!
  check: Check!
  user: User!
  round: Round!
}

type Round {
  id: Int!
  completed: Boolean!
  statuses: [Status!]!
}

type CheckStatus {
  name: String!
  status: StatusStatus!
}

type Scoreboard {
  round: Int!
  scores: [Int!]!
  checks: [CheckStatus!]!
}

type Mutation {
  createUser(name: String!, teamNumber: Int!, role: UserRole!): User!
  updateUser(id: Int!, name: String!, teamNumber: Int!, role: UserRole!): User!
  updatePassword(
    id: Int!
    previousPassword: String!
    newPassword: String!
  ): User!
  updatePasswordAdmin(id: Int!, password: String!): User!
  deleteUser(id: Int!): String!

  createCheck(name: String!, weight: Int!): Check!
  updateCheck(id: Int!, name: String!, weight: Int!): Check!
  deleteCheck(id: Int!): String!

  updateCredential(id: Int!, password: String!): Credential!
  deleteCredential(id: Int!): String!

  updateStatus(id: Int!, status: StatusStatus!, message: String!): Status!

  updateRoundStatuses(id: Int!, status: StatusStatus!): String!
  updateRoundStatusesByCheck(
    roundInt: Int!
    checkInt: Int!
    status: StatusStatus!
  ): String!
  updateRoundStatusesByUser(
    roundInt: Int!
    userInt: Int!
    status: StatusStatus!
  ): String!
  updateRoundStatusesByCheckAndUser(
    roundInt: Int!
    checkInt: Int!
    userInt: Int!
    status: StatusStatus!
  ): String!
}
