// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChecksColumns holds the columns for the "checks" table.
	ChecksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "weight", Type: field.TypeInt},
	}
	// ChecksTable holds the schema information for the "checks" table.
	ChecksTable = &schema.Table{
		Name:       "checks",
		Columns:    ChecksColumns,
		PrimaryKey: []*schema.Column{ChecksColumns[0]},
	}
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "credential_user", Type: field.TypeUUID},
		{Name: "credential_check", Type: field.TypeUUID},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "credentials_users_user",
				Columns:    []*schema.Column{CredentialsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "credentials_checks_check",
				Columns:    []*schema.Column{CredentialsColumns[3]},
				RefColumns: []*schema.Column{ChecksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoundsColumns holds the columns for the "rounds" table.
	RoundsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "number", Type: field.TypeInt, Unique: true},
		{Name: "completed", Type: field.TypeBool, Default: false},
	}
	// RoundsTable holds the schema information for the "rounds" table.
	RoundsTable = &schema.Table{
		Name:       "rounds",
		Columns:    RoundsColumns,
		PrimaryKey: []*schema.Column{RoundsColumns[0]},
	}
	// ScoresColumns holds the columns for the "scores" table.
	ScoresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "score", Type: field.TypeInt},
		{Name: "round_scores", Type: field.TypeUUID},
		{Name: "user_scores", Type: field.TypeUUID},
	}
	// ScoresTable holds the schema information for the "scores" table.
	ScoresTable = &schema.Table{
		Name:       "scores",
		Columns:    ScoresColumns,
		PrimaryKey: []*schema.Column{ScoresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scores_rounds_scores",
				Columns:    []*schema.Column{ScoresColumns[2]},
				RefColumns: []*schema.Column{RoundsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "scores_users_scores",
				Columns:    []*schema.Column{ScoresColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"success", "failure", "unknown"}, Default: "unknown"},
		{Name: "message", Type: field.TypeString, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "points", Type: field.TypeInt},
		{Name: "status_round", Type: field.TypeUUID},
		{Name: "status_check", Type: field.TypeUUID},
		{Name: "status_user", Type: field.TypeUUID},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:       "status",
		Columns:    StatusColumns,
		PrimaryKey: []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "status_rounds_round",
				Columns:    []*schema.Column{StatusColumns[5]},
				RefColumns: []*schema.Column{RoundsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "status_checks_check",
				Columns:    []*schema.Column{StatusColumns[6]},
				RefColumns: []*schema.Column{ChecksColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "status_users_user",
				Columns:    []*schema.Column{StatusColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "team_number", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"competitor", "admin"}, Default: "competitor"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChecksTable,
		CredentialsTable,
		RoundsTable,
		ScoresTable,
		StatusTable,
		UsersTable,
	}
)

func init() {
	CredentialsTable.ForeignKeys[0].RefTable = UsersTable
	CredentialsTable.ForeignKeys[1].RefTable = ChecksTable
	ScoresTable.ForeignKeys[0].RefTable = RoundsTable
	ScoresTable.ForeignKeys[1].RefTable = UsersTable
	StatusTable.ForeignKeys[0].RefTable = RoundsTable
	StatusTable.ForeignKeys[1].RefTable = ChecksTable
	StatusTable.ForeignKeys[2].RefTable = UsersTable
}
