// Code generated by ent, DO NOT EDIT.

package round

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/compscore/compscore/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldID, id))
}

// Round applies equality check predicate on the "round" field. It's identical to RoundEQ.
func Round(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRound, v))
}

// RoundEQ applies the EQ predicate on the "round" field.
func RoundEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRound, v))
}

// RoundNEQ applies the NEQ predicate on the "round" field.
func RoundNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldRound, v))
}

// RoundIn applies the In predicate on the "round" field.
func RoundIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldRound, vs...))
}

// RoundNotIn applies the NotIn predicate on the "round" field.
func RoundNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldRound, vs...))
}

// RoundGT applies the GT predicate on the "round" field.
func RoundGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldRound, v))
}

// RoundGTE applies the GTE predicate on the "round" field.
func RoundGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldRound, v))
}

// RoundLT applies the LT predicate on the "round" field.
func RoundLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldRound, v))
}

// RoundLTE applies the LTE predicate on the "round" field.
func RoundLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldRound, v))
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := newStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		p(s.Not())
	})
}
