// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/compscore/compscore/pkg/ent/credential"
	"github.com/compscore/compscore/pkg/ent/predicate"
	"github.com/compscore/compscore/pkg/ent/status"
	"github.com/compscore/compscore/pkg/ent/team"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetNumber sets the "number" field.
func (tu *TeamUpdate) SetNumber(i int) *TeamUpdate {
	tu.mutation.ResetNumber()
	tu.mutation.SetNumber(i)
	return tu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableNumber(i *int) *TeamUpdate {
	if i != nil {
		tu.SetNumber(*i)
	}
	return tu
}

// AddNumber adds i to the "number" field.
func (tu *TeamUpdate) AddNumber(i int) *TeamUpdate {
	tu.mutation.AddNumber(i)
	return tu
}

// ClearNumber clears the value of the "number" field.
func (tu *TeamUpdate) ClearNumber() *TeamUpdate {
	tu.mutation.ClearNumber()
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetPassword sets the "password" field.
func (tu *TeamUpdate) SetPassword(s string) *TeamUpdate {
	tu.mutation.SetPassword(s)
	return tu
}

// SetRole sets the "role" field.
func (tu *TeamUpdate) SetRole(t team.Role) *TeamUpdate {
	tu.mutation.SetRole(t)
	return tu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableRole(t *team.Role) *TeamUpdate {
	if t != nil {
		tu.SetRole(*t)
	}
	return tu
}

// AddStatuIDs adds the "status" edge to the Status entity by IDs.
func (tu *TeamUpdate) AddStatuIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddStatuIDs(ids...)
	return tu
}

// AddStatus adds the "status" edges to the Status entity.
func (tu *TeamUpdate) AddStatus(s ...*Status) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddStatuIDs(ids...)
}

// AddCredentialIDs adds the "credential" edge to the Credential entity by IDs.
func (tu *TeamUpdate) AddCredentialIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddCredentialIDs(ids...)
	return tu
}

// AddCredential adds the "credential" edges to the Credential entity.
func (tu *TeamUpdate) AddCredential(c ...*Credential) *TeamUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCredentialIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearStatus clears all "status" edges to the Status entity.
func (tu *TeamUpdate) ClearStatus() *TeamUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// RemoveStatuIDs removes the "status" edge to Status entities by IDs.
func (tu *TeamUpdate) RemoveStatuIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveStatuIDs(ids...)
	return tu
}

// RemoveStatus removes "status" edges to Status entities.
func (tu *TeamUpdate) RemoveStatus(s ...*Status) *TeamUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveStatuIDs(ids...)
}

// ClearCredential clears all "credential" edges to the Credential entity.
func (tu *TeamUpdate) ClearCredential() *TeamUpdate {
	tu.mutation.ClearCredential()
	return tu
}

// RemoveCredentialIDs removes the "credential" edge to Credential entities by IDs.
func (tu *TeamUpdate) RemoveCredentialIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveCredentialIDs(ids...)
	return tu
}

// RemoveCredential removes "credential" edges to Credential entities.
func (tu *TeamUpdate) RemoveCredential(c ...*Credential) *TeamUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCredentialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeamUpdate) check() error {
	if v, ok := tu.mutation.Number(); ok {
		if err := team.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Team.number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Name(); ok {
		if err := team.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Team.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Password(); ok {
		if err := team.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Team.password": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Role(); ok {
		if err := team.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Team.role": %w`, err)}
		}
	}
	return nil
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Number(); ok {
		_spec.SetField(team.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedNumber(); ok {
		_spec.AddField(team.FieldNumber, field.TypeInt, value)
	}
	if tu.mutation.NumberCleared() {
		_spec.ClearField(team.FieldNumber, field.TypeInt)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Password(); ok {
		_spec.SetField(team.FieldPassword, field.TypeString, value)
	}
	if value, ok := tu.mutation.Role(); ok {
		_spec.SetField(team.FieldRole, field.TypeEnum, value)
	}
	if tu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedStatusIDs(); len(nodes) > 0 && !tu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCredentialIDs(); len(nodes) > 0 && !tu.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetNumber sets the "number" field.
func (tuo *TeamUpdateOne) SetNumber(i int) *TeamUpdateOne {
	tuo.mutation.ResetNumber()
	tuo.mutation.SetNumber(i)
	return tuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableNumber(i *int) *TeamUpdateOne {
	if i != nil {
		tuo.SetNumber(*i)
	}
	return tuo
}

// AddNumber adds i to the "number" field.
func (tuo *TeamUpdateOne) AddNumber(i int) *TeamUpdateOne {
	tuo.mutation.AddNumber(i)
	return tuo
}

// ClearNumber clears the value of the "number" field.
func (tuo *TeamUpdateOne) ClearNumber() *TeamUpdateOne {
	tuo.mutation.ClearNumber()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetPassword sets the "password" field.
func (tuo *TeamUpdateOne) SetPassword(s string) *TeamUpdateOne {
	tuo.mutation.SetPassword(s)
	return tuo
}

// SetRole sets the "role" field.
func (tuo *TeamUpdateOne) SetRole(t team.Role) *TeamUpdateOne {
	tuo.mutation.SetRole(t)
	return tuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableRole(t *team.Role) *TeamUpdateOne {
	if t != nil {
		tuo.SetRole(*t)
	}
	return tuo
}

// AddStatuIDs adds the "status" edge to the Status entity by IDs.
func (tuo *TeamUpdateOne) AddStatuIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddStatuIDs(ids...)
	return tuo
}

// AddStatus adds the "status" edges to the Status entity.
func (tuo *TeamUpdateOne) AddStatus(s ...*Status) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddStatuIDs(ids...)
}

// AddCredentialIDs adds the "credential" edge to the Credential entity by IDs.
func (tuo *TeamUpdateOne) AddCredentialIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddCredentialIDs(ids...)
	return tuo
}

// AddCredential adds the "credential" edges to the Credential entity.
func (tuo *TeamUpdateOne) AddCredential(c ...*Credential) *TeamUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCredentialIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearStatus clears all "status" edges to the Status entity.
func (tuo *TeamUpdateOne) ClearStatus() *TeamUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// RemoveStatuIDs removes the "status" edge to Status entities by IDs.
func (tuo *TeamUpdateOne) RemoveStatuIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveStatuIDs(ids...)
	return tuo
}

// RemoveStatus removes "status" edges to Status entities.
func (tuo *TeamUpdateOne) RemoveStatus(s ...*Status) *TeamUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveStatuIDs(ids...)
}

// ClearCredential clears all "credential" edges to the Credential entity.
func (tuo *TeamUpdateOne) ClearCredential() *TeamUpdateOne {
	tuo.mutation.ClearCredential()
	return tuo
}

// RemoveCredentialIDs removes the "credential" edge to Credential entities by IDs.
func (tuo *TeamUpdateOne) RemoveCredentialIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveCredentialIDs(ids...)
	return tuo
}

// RemoveCredential removes "credential" edges to Credential entities.
func (tuo *TeamUpdateOne) RemoveCredential(c ...*Credential) *TeamUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCredentialIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeamUpdateOne) check() error {
	if v, ok := tuo.mutation.Number(); ok {
		if err := team.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Team.number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Name(); ok {
		if err := team.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Team.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Password(); ok {
		if err := team.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Team.password": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Role(); ok {
		if err := team.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Team.role": %w`, err)}
		}
	}
	return nil
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Number(); ok {
		_spec.SetField(team.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedNumber(); ok {
		_spec.AddField(team.FieldNumber, field.TypeInt, value)
	}
	if tuo.mutation.NumberCleared() {
		_spec.ClearField(team.FieldNumber, field.TypeInt)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Password(); ok {
		_spec.SetField(team.FieldPassword, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Role(); ok {
		_spec.SetField(team.FieldRole, field.TypeEnum, value)
	}
	if tuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !tuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.StatusTable,
			Columns: []string{team.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCredentialIDs(); len(nodes) > 0 && !tuo.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   team.CredentialTable,
			Columns: []string{team.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
