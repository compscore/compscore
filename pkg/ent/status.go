// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/compscore/compscore/pkg/ent/check"
	"github.com/compscore/compscore/pkg/ent/round"
	"github.com/compscore/compscore/pkg/ent/status"
	"github.com/compscore/compscore/pkg/ent/user"
)

// Status is the model entity for the Status schema.
type Status struct {
	config `json:"-"`
	// ID of the ent.
	// ID of the status
	ID int `json:"id"`
	// Status of the status
	Status status.Status `json:"status"`
	// Message of the status
	Message string `json:"message"`
	// Timestamp of the status
	Timestamp time.Time `json:"timestamp"`
	// Points of the status
	Points int `json:"points"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusQuery when eager-loading is set.
	Edges        StatusEdges `json:"edges"`
	status_round *int
	status_check *int
	status_user  *int
	selectValues sql.SelectValues
}

// StatusEdges holds the relations/edges for other nodes in the graph.
type StatusEdges struct {
	// Round of the status
	Round *Round `json:"round,omitempty"`
	// Check of the status
	Check *Check `json:"check,omitempty"`
	// User of the status
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoundOrErr returns the Round value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) RoundOrErr() (*Round, error) {
	if e.loadedTypes[0] {
		if e.Round == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: round.Label}
		}
		return e.Round, nil
	}
	return nil, &NotLoadedError{edge: "round"}
}

// CheckOrErr returns the Check value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) CheckOrErr() (*Check, error) {
	if e.loadedTypes[1] {
		if e.Check == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: check.Label}
		}
		return e.Check, nil
	}
	return nil, &NotLoadedError{edge: "check"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Status) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case status.FieldID, status.FieldPoints:
			values[i] = new(sql.NullInt64)
		case status.FieldStatus, status.FieldMessage:
			values[i] = new(sql.NullString)
		case status.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case status.ForeignKeys[0]: // status_round
			values[i] = new(sql.NullInt64)
		case status.ForeignKeys[1]: // status_check
			values[i] = new(sql.NullInt64)
		case status.ForeignKeys[2]: // status_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Status fields.
func (s *Status) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case status.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case status.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = status.Status(value.String)
			}
		case status.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				s.Message = value.String
			}
		case status.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				s.Timestamp = value.Time
			}
		case status.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				s.Points = int(value.Int64)
			}
		case status.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_round", value)
			} else if value.Valid {
				s.status_round = new(int)
				*s.status_round = int(value.Int64)
			}
		case status.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_check", value)
			} else if value.Valid {
				s.status_check = new(int)
				*s.status_check = int(value.Int64)
			}
		case status.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field status_user", value)
			} else if value.Valid {
				s.status_user = new(int)
				*s.status_user = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Status.
// This includes values selected through modifiers, order, etc.
func (s *Status) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryRound queries the "round" edge of the Status entity.
func (s *Status) QueryRound() *RoundQuery {
	return NewStatusClient(s.config).QueryRound(s)
}

// QueryCheck queries the "check" edge of the Status entity.
func (s *Status) QueryCheck() *CheckQuery {
	return NewStatusClient(s.config).QueryCheck(s)
}

// QueryUser queries the "user" edge of the Status entity.
func (s *Status) QueryUser() *UserQuery {
	return NewStatusClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Status.
// Note that you need to call Status.Unwrap() before calling this method if this Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Status) Update() *StatusUpdateOne {
	return NewStatusClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Status) Unwrap() *Status {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Status is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Status) String() string {
	var builder strings.Builder
	builder.WriteString("Status(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(s.Message)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(s.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", s.Points))
	builder.WriteByte(')')
	return builder.String()
}

// StatusSlice is a parsable slice of Status.
type StatusSlice []*Status
